function bitmapParser(e){if(Buffer.isBuffer(e)){var r={};if(r.buffer=e,r.osEndianness=os.endianness(),r.typeBuffer=r.buffer.slice(0,2),r.type=r.typeBuffer.toString("utf8"),"BM"!==r.type)return"Error: bitmapParser only parses BM type bitmaps.";if(r.sizeOfBitmapInBytesBuffer=r.buffer.slice(2,6),r.sizeOfBitmapInBytes=readUInt32OfBufferAt0(r.sizeOfBitmapInBytesBuffer),r.pixelOffsetInBytesBuffer=r.buffer.slice(10,14),r.pixelOffsetInBytes=readUInt32OfBufferAt0(r.pixelOffsetInBytesBuffer),r.dibHeaderSize=getDIBHeaderSize(r.buffer),r.dibHeaderType=getDIBHeaderType(r.dibHeaderSize),"BITMAPINFOHEADER"===r.dibHeaderType){r.widthBuffer=r.buffer.slice(18,22),r.width=readUInt32OfBufferAt0(r.widthBuffer),r.heightBuffer=r.buffer.slice(22,26),r.height=readUInt32OfBufferAt0(r.heightBuffer),r.numberOfColorPlanesBuffer=r.buffer.slice(26,28),r.numberOfColorPlanes=readUInt16OfBufferAt0(r.numberOfColorPlanesBuffer),r.colorDepthBuffer=r.buffer.slice(28,30),r.colorDepth=readUInt16OfBufferAt0(r.colorDepthBuffer),r.compressionMethodIndexBuffer=r.buffer.slice(30,34),r.compressionMethodIndex=readUInt32OfBufferAt0(r.compressionMethodIndexBuffer),r.compressionType=getCompressionType(r.compressionMethodIndex),r.rawDataSizeBuffer=r.buffer.slice(34,38),r.rawDataSize=readUInt32OfBufferAt0(r.rawDataSizeBuffer),r.horizontalResolutionBuffer=r.buffer.slice(38,42),r.horizontalResolution=readUInt32OfBufferAt0(r.horizontalResolutionBuffer),r.verticalResolutionBuffer=r.buffer.slice(42,46),r.verticalResolution=readUInt32OfBufferAt0(r.verticalResolutionBuffer),r.numberOfColorsInPaletteBuffer=r.buffer.slice(46,50),r.numberOfColorsInPalette=readUInt32OfBufferAt0(r.numberOfColorsInPaletteBuffer),r.numberOfImportantColorsBuffer=r.buffer.slice(50,54),r.numberOfImportantColors=readUInt32OfBufferAt0(r.numberOfImportantColorsBuffer);var o=0;for("BI_BITFIELDS"===r.compressionType&&(r.redBitMaskBuffer=r.buffer.slice(54,58),r.greenBitMaskBuffer=r.buffer.slice(58,62),r.blueBitMaskBuffer=r.buffer.slice(62,66),o=12),r.colorPaletteBuffer=r.buffer.slice(14+r.dibHeaderSize+o,r.pixelOffsetInBytes),r.colorPalettePixels=[],r.colorPalettePixelBuffers=[],i=0;i<r.pixelOffsetInBytes-(14+r.dibHeaderSize+o);i+=4){var t=r.colorPaletteBuffer.slice(i,i+1),n=r.colorPaletteBuffer.slice(i+1,i+2),a=r.colorPaletteBuffer.slice(i+2,i+3),s=r.colorPaletteBuffer.slice(i+3,i+4),l=a.readUInt8(0),f=n.readUInt8(0),p=t.readUInt8(0),u=s.readUInt8(0),c=[a,n,t,s],h=[l,f,p,u];r.colorPalettePixels.push(h),r.colorPalettePixelBuffers.push(c)}r.pixels=[],r.pixelBuffers=[];var m=0,d=1;for(0===r.colorPalettePixels.length&&(24===r.colorDepth?d=3:32===r.colorDepth&&(d=4)),i=r.pixelOffsetInBytes;i<r.width*r.height*d+r.pixelOffsetInBytes;i++){var l,f,p,u;if(r.colorPalettePixels.length>0&&8===r.colorDepth){var B=r.buffer.slice(i,i+1),P=B.readUInt8(0);l=r.colorPalettePixels[P][0],f=r.colorPalettePixels[P][1],p=r.colorPalettePixels[P][2],u=r.colorPalettePixels[P][3]}else if(24===r.colorDepth&&m<=r.width*r.height*d){var B=r.buffer.slice(i,i+3);l=B.readUInt8(2),f=B.readUInt8(1),p=B.readUInt8(0),u=0,i+=2,m++}if(m<=r.width*r.height){var h=[l,f,p,u];r.pixels.push(h),r.pixelBuffers.push(B)}}}else if("BITMAPV4HEADER"===r.dibHeaderType){r.widthBuffer=r.buffer.slice(18,22),r.width=readUInt32OfBufferAt0(r.widthBuffer),r.heightBuffer=r.buffer.slice(22,26),r.height=readUInt32OfBufferAt0(r.heightBuffer),r.numberOfColorPlanesBuffer=r.buffer.slice(26,28),r.numberOfColorPlanes=readUInt16OfBufferAt0(r.numberOfColorPlanesBuffer),r.colorDepthBuffer=r.buffer.slice(28,30),r.colorDepth=readUInt16OfBufferAt0(r.colorDepthBuffer),r.compressionMethodIndexBuffer=r.buffer.slice(30,34),r.compressionMethodIndex=readUInt32OfBufferAt0(r.compressionMethodIndexBuffer),r.compressionType=getCompressionType(r.compressionMethodIndex),r.rawDataSizeBuffer=r.buffer.slice(34,38),r.rawDataSize=readUInt32OfBufferAt0(r.rawDataSizeBuffer),r.horizontalResolutionBuffer=r.buffer.slice(38,42),r.horizontalResolution=readUInt32OfBufferAt0(r.horizontalResolutionBuffer),r.verticalResolutionBuffer=r.buffer.slice(42,46),r.verticalResolution=readUInt32OfBufferAt0(r.verticalResolutionBuffer),r.numberOfColorsInPaletteBuffer=r.buffer.slice(46,50),r.numberOfColorsInPalette=readUInt32OfBufferAt0(r.numberOfColorsInPaletteBuffer),r.numberOfImportantColorsBuffer=r.buffer.slice(50,54),r.numberOfImportantColors=readUInt32OfBufferAt0(r.numberOfImportantColorsBuffer),r.redMaskBuffer=r.buffer.slice(54,58),r.redMask=readUInt32OfBufferAt0(r.redMaskBuffer),r.greenMaskBuffer=r.buffer.slice(58,62),r.greenMask=readUInt32OfBufferAt0(r.greenMaskBuffer),r.blueMaskBuffer=r.buffer.slice(62,66),r.blueMask=readUInt32OfBufferAt0(r.blueMaskBuffer),r.alphaMaskBuffer=r.buffer.slice(66,70),r.alphaMask=readUInt32OfBufferAt0(r.alphaMaskBuffer),r.colorSpaceTypeBuffer=r.buffer.slice(70,74),r.colorSpaceType=readUInt32OfBufferAt0(r.colorSpaceTypeBuffer),r.cieXYZBuffer=r.buffer.slice(74,110);var b=r.cieXYZBuffer.slice(0,12),g=b.slice(0,4),I=b.slice(4,8),O=b.slice(8,12),y=[readUInt32OfBufferAt0(g),readUInt32OfBufferAt0(I),readUInt32OfBufferAt0(O)],x=r.cieXYZBuffer.slice(12,24),w=x.slice(0,4),T=x.slice(4,8),v=x.slice(8,12),C=[readUInt32OfBufferAt0(w),readUInt32OfBufferAt0(T),readUInt32OfBufferAt0(v)],S=r.cieXYZBuffer.slice(24,36),U=S.slice(0,4),z=S.slice(4,8),A=S.slice(8,12),E=[readUInt32OfBufferAt0(U),readUInt32OfBufferAt0(z),readUInt32OfBufferAt0(A)];for(r.cieXYZ=[y,C,E],r.redGammaBuffer=r.buffer.slice(110,114),r.redGamma=readUInt32OfBufferAt0(r.redGammaBuffer),r.greenGammaBuffer=r.buffer.slice(114,118),r.greenGamma=readUInt32OfBufferAt0(r.greenGammaBuffer),r.blueGammaBuffer=r.buffer.slice(118,122),r.blueGamma=readUInt32OfBufferAt0(r.blueGammaBuffer),r.colorPaletteBuffer=r.buffer.slice(14+r.dibHeaderSize,r.pixelOffsetInBytes),r.colorPalettePixels=[],r.colorPalettePixelBuffers=[],i=0;i<r.pixelOffsetInBytes-(14+r.dibHeaderSize);i+=4){var t=r.colorPaletteBuffer.slice(i,i+1),n=r.colorPaletteBuffer.slice(i+1,i+2),a=r.colorPaletteBuffer.slice(i+2,i+3),s=r.colorPaletteBuffer.slice(i+3,i+4),l=a.readUInt8(0),f=n.readUInt8(0),p=t.readUInt8(0),u=s.readUInt8(0),c=[a,n,t,s],h=[l,f,p,u];r.colorPalettePixels.push(h),r.colorPalettePixelBuffers.push(c)}r.pixels=[],r.pixelBuffers=[];var m=0,d=1;for(0===r.colorPalettePixels.length&&(24===r.colorDepth?d=3:32===r.colorDepth&&(d=4)),i=r.pixelOffsetInBytes;i<r.width*r.height*d+r.pixelOffsetInBytes;i++){var l,f,p,u;if(r.colorPalettePixels.length>0&&8===r.colorDepth){var B=r.buffer.slice(i,i+1),P=B.readUInt8(0);l=r.colorPalettePixels[P][0],f=r.colorPalettePixels[P][1],p=r.colorPalettePixels[P][2],u=r.colorPalettePixels[P][3]}else if(24===r.colorDepth&&m<=r.width*r.height*d){var B=r.buffer.slice(i,i+3);l=B.readUInt8(2),f=B.readUInt8(1),p=B.readUInt8(0),u=0,i+=2,m++}if(m<=r.width*r.height){var h=[l,f,p,u];r.pixels.push(h),r.pixelBuffers.push(B)}}}return r}return void 0===e?"Error: bitmapParser has not been provided a [bitmapBuffer].  [bitmapBuffer] must be a buffer provided to the function.":"Error: bitmapParser has been provided an invalid [bitmapBuffer].  [bitmapBuffer] must be a buffer."}function readUInt32OfBufferAt0(e){var r=-1;return r="LE"===endianness?e.readUInt32LE(0):e.readUInt32BE(0)}function readUInt16OfBufferAt0(e){var r=-1;return r="LE"===endianness?e.readUInt16LE(0):e.readUInt16BE(0)}function getDIBHeaderSize(e){var r=-1;return r="LE"===endianness?e.readUInt32LE(14):e.readUInt32BE(14)}function getDIBHeaderType(e){var r="Error: Bitmap DIB header is not a standard format.";return 12===e?r="BITMAPCOREHEADEROS21XBITMAPHEADER":40===e?r="BITMAPINFOHEADER":52===e?r="BITMAPV2INFOHEADER":56===e?r="BITMAPV3INFOHEADER":64===e?r="OS22XBITMAPHEADER":108===e?r="BITMAPV4HEADER":124===e&&(r="BITMAPV5HEADER"),r}function getCompressionType(e){var r="Error: The compression method index provided does not correspond to a standard compression type.";return 0===e?r="BI_RGB":1===e?r="BI_RLE8":2===e?r="BI_RLE4":3===e?r="BI_BITFIELDS":4===e?r="BI_JPEG":5===e?r="BI_PNG":6===e?r="BI_ALPHABITFIELDS":11===e?r="BI_CMYK":12===e?r="BI_CMYKRLE8":13===e&&(r="BI_CMYKRLE4"),r}function consoleLogParsedData(e){e.hasOwnProperty("osEndianness")&&console.log("Operating system endianness: "+e.osEndianness),e.hasOwnProperty("type")&&console.log("Bitmap type: "+e.type),e.hasOwnProperty("sizeOfBitmapInBytes")&&console.log("Size of the bitmap in bytes: "+e.sizeOfBitmapInBytes),e.hasOwnProperty("pixelOffsetInBytes")&&console.log("Pixel offset in bytes: "+e.pixelOffsetInBytes),e.hasOwnProperty("dibHeaderSize")&&console.log("DIB header size: "+e.dibHeaderSize),e.hasOwnProperty("dibHeaderType")&&console.log("DIB header type: "+e.dibHeaderType),e.hasOwnProperty("width")&&console.log("Width: "+e.width),e.hasOwnProperty("height")&&console.log("Height: "+e.height),e.hasOwnProperty("numberOfColorPlanes")&&console.log("Number of color planes:"+e.numberOfColorPlanes),e.hasOwnProperty("colorDepth")&&console.log("Color depth: "+e.colorDepth),e.hasOwnProperty("compressionMethodIndex")&&console.log("Compression method index: "+e.compressionMethodIndex),e.hasOwnProperty("compressionType")&&console.log("Compression type: "+e.compressionType),e.hasOwnProperty("rawDataSize")&&console.log("Raw data size: "+e.rawDataSize),e.hasOwnProperty("horizontalResolution")&&console.log("Horizontal resolution: "+e.horizontalResolution),e.hasOwnProperty("verticalResolution")&&console.log("Vertical resolution: "+e.verticalResolution),e.hasOwnProperty("numberOfColorsInPalette")&&console.log("Number of colors in palette: "+e.numberOfColorsInPalette),e.hasOwnProperty("numberOfImportantColors")&&console.log("Number of important colors: "+e.numberOfImportantColors),e.hasOwnProperty("colorPalettePixels")&&console.log("Color palette pixels array length: "+e.colorPalettePixels.length),e.hasOwnProperty("pixels")&&console.log("Pixels array length: "+e.pixels.length),e.hasOwnProperty("redMask")&&console.log("Red mask: "+e.redMask),e.hasOwnProperty("greenMask")&&console.log("Green mask: "+e.greenMask),e.hasOwnProperty("blueMask")&&console.log("Blue mask: "+e.blueMask),e.hasOwnProperty("alphaMask")&&console.log("Alpha mask: "+e.alphaMask),e.hasOwnProperty("colorSpaceType")&&console.log("Color space type: "+e.colorSpaceType),e.hasOwnProperty("cieXYZ")&&console.log("CIEXYZ triplet: "+e.cieXYZ),e.hasOwnProperty("redGamma")&&console.log("Red gamma: "+e.redGamma),e.hasOwnProperty("greenGamma")&&console.log("Green gamma: "+e.greenGamma),e.hasOwnProperty("blueGamma")&&console.log("Blue gamma: "+e.blueGamma)}var fs=require("fs"),Buffer=require("buffer").Buffer,bitmapParser=require(__dirname+"/bitmapParser.js").bitmapParser,Bitmap=function(e){var r=this;fs.readFile(e,function(o,t){if(o)return console.log(o);console.log();var n=bitmapParser(t);n.fileName=e.substr(e.lastIndexOf("/")+1,e.length),n.transformedBuffer=new Buffer(n.buffer),console.log("File Information"),r.consoleLogBitmapObject(n),console.log(),console.log("File Transformation"),process.argv.length>=3&&process.argv.length<5&&("greyscalePalette"===process.argv[3]?(console.log("Performing greyscale operation on the bitmap's color palette."),r.transformPaletteToGreyscale(n)):"redShiftPalette"===process.argv[3]?(console.log("Performing red shift operation on the bitmap's color palette."),r.transformPaletteToRedChannel(n)):"greenShiftPalette"===process.argv[3]?(console.log("Performing green shift operation on the bitmap's color palette."),r.transformPaletteToGreenChannel(n)):"blueShiftPalette"===process.argv[3]?(console.log("Performing blue shift operation on the bitmap's color palette."),r.transformPaletteToBlueChannel(n)):"greyscalePixels"===process.argv[3]?(console.log("Performing greyscale operation on the bitmap's pixels."),r.transformPixelsToGreyscale(n)):"redShiftPixels"===process.argv[3]?(console.log("Performing red shift operation on the bitmap's pixels."),r.transformPixelsToRedChannel(n)):"greenShiftPixels"===process.argv[3]?(console.log("Performing green shift operation on the bitmap's pixels."),r.transformPixelsToGreenChannel(n)):"blueShiftPixels"===process.argv[3]?(console.log("Performing blue shift operation on the bitmap's pixels."),r.transformPixelsToBlueChannel(n)):console.log(process.argv[3]+" is not a valid transformation command.")),3===process.argv.length&&console.log("No image processing transformations have been called on the file."),console.log(),console.log("Command Output"),console.log('Writing transformed bitmap buffer to new bitmap file in the "output" directory.'),r.writeBitmap(n.transformedBuffer)})};Bitmap.prototype.transformPaletteToGreyscale=function(e){if(e.hasOwnProperty("numberOfColorsInPalette"))if(e.numberOfColorsInPalette>0){if(e.hasOwnProperty("colorPalettePixels"))for(i=0;i<e.pixelOffsetInBytes-(14+e.dibHeaderSize);i+=4){e.colorPaletteBuffer=e.buffer.slice(14+e.dibHeaderSize,e.pixelOffsetInBytes);var r=e.colorPaletteBuffer.slice(i,i+1),o=e.colorPaletteBuffer.slice(i+1,i+2),t=e.colorPaletteBuffer.slice(i+2,i+3),n=e.colorPaletteBuffer.slice(i+3,i+4),a=t.readUInt8(0),s=o.readUInt8(0),l=r.readUInt8(0),f=n.readUInt8(0),p=Math.floor((a+s+l+f)/3);e.transformedBuffer[14+e.dibHeaderSize+i]=p.toString(16),e.transformedBuffer[14+e.dibHeaderSize+i+1]=p.toString(16),e.transformedBuffer[14+e.dibHeaderSize+i+2]=p.toString(16),e.transformedBuffer[14+e.dibHeaderSize+i+3]=p.toString(16)}}else console.log("This bitmap does not have a palette to transform.");else console.log("This bitmap does not have a defined number of palette colors.  You cannot transform the color palette until it has been fully initialized within the Bitmap object.")},Bitmap.prototype.transformPaletteToRedChannel=function(e){if(e.hasOwnProperty("numberOfColorsInPalette"))if(e.numberOfColorsInPalette>0){if(e.hasOwnProperty("colorPalettePixels"))for(i=0;i<e.pixelOffsetInBytes-(14+e.dibHeaderSize);i+=4)e.transformedBuffer[14+e.dibHeaderSize+i]=parseInt(0).toString(16),e.transformedBuffer[14+e.dibHeaderSize+i+1]=parseInt(0).toString(16)}else console.log("This bitmap does not have a palette to transform.");else console.log("This bitmap does not have a defined number of palette colors.  You cannot transform the color palette until it has been fully initialized within the Bitmap object.")},Bitmap.prototype.transformPaletteToBlueChannel=function(e){if(e.hasOwnProperty("numberOfColorsInPalette"))if(e.numberOfColorsInPalette>0){if(e.hasOwnProperty("colorPalettePixels"))for(i=0;i<e.pixelOffsetInBytes-(14+e.dibHeaderSize);i+=4)e.transformedBuffer[14+e.dibHeaderSize+i+1]=parseInt(0).toString(16),e.transformedBuffer[14+e.dibHeaderSize+i+2]=parseInt(0).toString(16)}else console.log("This bitmap does not have a palette to transform.");else console.log("This bitmap does not have a defined number of palette colors.  You cannot transform the color palette until it has been fully initialized within the Bitmap object.")},Bitmap.prototype.transformPaletteToGreenChannel=function(e){if(e.hasOwnProperty("numberOfColorsInPalette"))if(e.numberOfColorsInPalette>0){if(e.hasOwnProperty("colorPalettePixels"))for(i=0;i<e.pixelOffsetInBytes-(14+e.dibHeaderSize);i+=4)e.transformedBuffer[14+e.dibHeaderSize+i]=parseInt(0).toString(16),e.transformedBuffer[14+e.dibHeaderSize+i+2]=parseInt(0).toString(16)}else console.log("This bitmap does not have a palette to transform.");else console.log("This bitmap does not have a defined number of palette colors.  You cannot transform the color palette until it has been fully initialized within the Bitmap object.")},Bitmap.prototype.transformPixelsToGreyscale=function(e){if(e.hasOwnProperty("pixels"))if(24===e.colorDepth)if(0!==e.pixels.length){var r=e.width*e.height*3;for(i=0;i<r;i+=3){var o=e.pixels[i/3],t=Math.floor((o[0]+o[1]+o[2])/3);e.transformedBuffer[e.pixelOffsetInBytes+i]=parseInt(t),e.transformedBuffer[e.pixelOffsetInBytes+i+1]=parseInt(t),e.transformedBuffer[e.pixelOffsetInBytes+i+2]=parseInt(t)}}else console.log("Error: The bitmap must have pixels to continue transformation.");else console.log("Error: The bitmap must have 24 bit color depth to continue transformation.");else console.log("Error: The bitmap has no pixels array, cannot continue transformation.")},Bitmap.prototype.transformPixelsToRedChannel=function(e){if(e.hasOwnProperty("pixels"))if(24===e.colorDepth)if(0!==e.pixels.length)for(i=0;i<e.width*e.height*3;i+=3)e.transformedBuffer[e.pixelOffsetInBytes+i]=parseInt(0),e.transformedBuffer[e.pixelOffsetInBytes+i+1]=parseInt(0);else console.log("Error: The bitmap must have pixels to continue transformation.");else console.log("Error: The bitmap must have 24 bit color depth to continue transformation.");else console.log("Error: The bitmap has no pixels array, cannot continue transformation.")},Bitmap.prototype.transformPixelsToGreenChannel=function(e){if(e.hasOwnProperty("pixels"))if(24===e.colorDepth)if(0!==e.pixels.length)for(i=0;i<e.width*e.height*3;i+=3)e.transformedBuffer[e.pixelOffsetInBytes+i]=parseInt(0),e.transformedBuffer[e.pixelOffsetInBytes+i+2]=parseInt(0);else console.log("Error: The bitmap must have pixels to continue transformation.");else console.log("Error: The bitmap must have 24 bit color depth to continue transformation.");else console.log("Error: The bitmap has no pixels array, cannot continue transformation.")},Bitmap.prototype.transformPixelsToBlueChannel=function(e){if(e.hasOwnProperty("pixels"))if(24===e.colorDepth)if(0!==e.pixels.length)for(i=0;i<e.width*e.height*3;i+=3)e.transformedBuffer[e.pixelOffsetInBytes+i+1]=parseInt(0),e.transformedBuffer[e.pixelOffsetInBytes+i+2]=parseInt(0);else console.log("Error: The bitmap must have pixels to continue transformation.");else console.log("Error: The bitmap must have 24 bit color depth to continue transformation.");else console.log("Error: The bitmap has no pixels array, cannot continue transformation.")},Bitmap.prototype.writeBitmap=function(e){fs.writeFile(__dirname+"/../output/bitmap.bmp",e,function(e){return e?console.log(e):(console.log('The transformed bitmap buffer has successfully been written to the new "bitmap.bmp" file.'),void console.log())})},Bitmap.prototype.consoleLogBitmapObject=function(e){e.hasOwnProperty("fileName")&&console.log("File: "+e.fileName),e.hasOwnProperty("osEndianness")&&console.log("Operating system endianness: "+e.osEndianness),e.hasOwnProperty("type")&&console.log("Bitmap type: "+e.type),e.hasOwnProperty("sizeOfBitmapInBytes")&&console.log("Size of the bitmap in bytes: "+e.sizeOfBitmapInBytes),e.hasOwnProperty("pixelOffsetInBytes")&&console.log("Pixel offset in bytes: "+e.pixelOffsetInBytes),e.hasOwnProperty("dibHeaderSize")&&console.log("DIB header size: "+e.dibHeaderSize),e.hasOwnProperty("dibHeaderType")&&console.log("DIB header type: "+e.dibHeaderType),e.hasOwnProperty("width")&&console.log("Width: "+e.width),e.hasOwnProperty("height")&&console.log("Height: "+e.height),e.hasOwnProperty("numberOfColorPlanes")&&console.log("Number of color planes:"+e.numberOfColorPlanes),e.hasOwnProperty("colorDepth")&&console.log("Color depth: "+e.colorDepth),e.hasOwnProperty("compressionMethodIndex")&&console.log("Compression method index: "+e.compressionMethodIndex),e.hasOwnProperty("compressionType")&&console.log("Compression type: "+e.compressionType),e.hasOwnProperty("rawDataSize")&&console.log("Raw data size: "+e.rawDataSize),e.hasOwnProperty("horizontalResolution")&&console.log("Horizontal resolution: "+e.horizontalResolution),e.hasOwnProperty("verticalResolution")&&console.log("Vertical resolution: "+e.verticalResolution),e.hasOwnProperty("numberOfColorsInPalette")&&console.log("Number of colors in palette: "+e.numberOfColorsInPalette),e.hasOwnProperty("numberOfImportantColors")&&console.log("Number of important colors: "+e.numberOfImportantColors),e.hasOwnProperty("colorPalettePixels")&&console.log("Color palette pixels array length: "+e.colorPalettePixels.length),e.hasOwnProperty("pixels")&&console.log("Pixels array length: "+e.pixels.length),e.hasOwnProperty("redMask")&&console.log("Red mask: "+e.redMask),e.hasOwnProperty("greenMask")&&console.log("Green mask: "+e.greenMask),e.hasOwnProperty("blueMask")&&console.log("Blue mask: "+e.blueMask),e.hasOwnProperty("alphaMask")&&console.log("Alpha mask: "+e.alphaMask),e.hasOwnProperty("colorSpaceType")&&console.log("Color space type: "+e.colorSpaceType),e.hasOwnProperty("cieXYZ")&&console.log("CIEXYZ triplet: "+e.cieXYZ),e.hasOwnProperty("redGamma")&&console.log("Red gamma: "+e.redGamma),e.hasOwnProperty("greenGamma")&&console.log("Green gamma: "+e.greenGamma),e.hasOwnProperty("blueGamma")&&console.log("Blue gamma: "+e.blueGamma)},exports.Bitmap=Bitmap;var os=require("os"),endianness=os.endianness();exports.bitmapParser=bitmapParser;